version: "3"

services:

  ### Prometheus  Server
  prometheus:
    container_name: prometheus
    image: prom/prometheus
    ports:
      - 9090:9090
      - 10900:10900
      - 10901:10901
      - 10902:10902
    volumes:
      - ${PWD}/config/prometheus-config.yaml:/etc/prometheus/prometheus.yml
      - ${PWD}/config/alerts/basic.http.thresholds:/etc/prometheus/basic.http.thresholds
      - ${PWD}/prom_data:/opt/data/prometheus:rw
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/opt/data/prometheus'
      - '--storage.tsdb.retention=10m'
      - --storage.tsdb.min-block-duration=3m
      - --storage.tsdb.max-block-duration=4m
      - --web.enable-lifecycle


  ### Prometheus Alert Manager
  alert-manager:
    image: prom/alertmanager
    ports:
      - 9093:9093
    volumes:
      - ${PWD}/config/alertmanager.yml:/etc/alertmanager/alertmanager.yml
    command: --config.file=/etc/alertmanager/alertmanager.yml 


  ### Grafana Server
  grafana:
    image: grafana/grafana
    ports:
      - 3000:3000
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=secret


  node-exporter:
    image: prom/node-exporter
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.sysfs=/host/sys'
      - --collector.filesystem.ignored-mount-points
      - "^/(sys|proc|dev|host|etc|rootfs/var/lib/docker/containers|rootfs/var/lib/docker/overlay2|rootfs/run/docker/netns|rootfs/var/lib/docker/aufs)($$|/)"


  http-simulator:
    image: pierrevincent/prom-http-simulator
    ports:
      - 8884:8080


  blackbox-exporter:
    image: prom/blackbox-exporter
    ports:
      - 8885:9115
    volumes:
      - ${PWD}/config/blackbox.yaml:/etc/config/blackbox.yaml
    command: --config.file=/etc/config/blackbox.yaml

  influxdb:
    image: influxdb
    container_name: influxdb
    ports:
    - 8086:8086
    environment:
    - INFLUXDB_DB=prometheus
    - INFLUXDB_USER=prometheus
    - INFLUXDB_USER_PASSWORD=prometheus

  thanos:
    image: improbable/thanos
    container_name: thanos
    environment:
    - S3_ACCESS_KEY=AKIAJ7HJKLKEJU3UVHLA
    - S3_SECRET_KEY=<<INSERT AWS SECRET KEY HERE>>
    - S3_BUCKET=thanos-gds-test
    - S3_ENDPOINT=s3.amazonaws.com
    volumes:
    - ${PWD}/prom_data:/opt/data/prometheus:rw
    command:
    - sidecar
    - --prometheus.url=http://127.0.0.1:9090
    - --cluster.peers=127.0.0.1:10900
    - --log.level=debug
    - --tsdb.path=/opt/data/prometheus
    network_mode: "service:prometheus"
    depends_on:
    - prometheus

  thanos-query:
    image: improbable/thanos
    container_name: thanos-query
    command:
    - query
    - --cluster.peers=prometheus:10900
    - --log.level=debug
    - --query.replica-label=replica
    ports:
    - 11902:10902
    depends_on:
    - thanos

  thanos-store:
    image: improbable/thanos
    container_name: thanos-store
    environment:
    - S3_ACCESS_KEY=AKIAJ7HJKLKEJU3UVHLA
    - S3_SECRET_KEY=<<INSERT AWS SECRET KEY HERE>>
    - S3_BUCKET=thanos-gds-test
    - S3_ENDPOINT=s3.amazonaws.com
    command:
    - store
    - --cluster.peers=prometheus:10900
    - --log.level=debug
    depends_on:
    - thanos


  # view running config
  # docker exec -ti promdocker_alert-manager_1 amtool --alertmanager.url http://127.0.0.1:9093 config
  # view active alerts
  # docker exec -ti promdocker_alert-manager_1 amtool --alertmanager.url http://127.0.0.1:9093 alert